// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package mock_subscribers is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "se-school-case/pkg/model"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscriberInterface is a mock of SubscriberInterface interface.
type MockSubscriberInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberInterfaceMockRecorder
}

// MockSubscriberInterfaceMockRecorder is the mock recorder for MockSubscriberInterface.
type MockSubscriberInterfaceMockRecorder struct {
	mock *MockSubscriberInterface
}

// NewMockSubscriberInterface creates a new mock instance.
func NewMockSubscriberInterface(ctrl *gomock.Controller) *MockSubscriberInterface {
	mock := &MockSubscriberInterface{ctrl: ctrl}
	mock.recorder = &MockSubscriberInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriberInterface) EXPECT() *MockSubscriberInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockSubscriberInterface) Add(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockSubscriberInterfaceMockRecorder) Add(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockSubscriberInterface)(nil).Add), email)
}

// GetAll mocks base method.
func (m *MockSubscriberInterface) GetAll() ([]model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockSubscriberInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockSubscriberInterface)(nil).GetAll))
}
