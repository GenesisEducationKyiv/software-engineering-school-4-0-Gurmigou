// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_cron_jobs is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "se-school-case/pkg/model"

	gomock "github.com/golang/mock/gomock"
)

// MockRateInterface is a mock of RateInterface interface.
type MockRateInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRateInterfaceMockRecorder
}

// MockRateInterfaceMockRecorder is the mock recorder for MockRateInterface.
type MockRateInterfaceMockRecorder struct {
	mock *MockRateInterface
}

// NewMockRateInterface creates a new mock instance.
func NewMockRateInterface(ctrl *gomock.Controller) *MockRateInterface {
	mock := &MockRateInterface{ctrl: ctrl}
	mock.recorder = &MockRateInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateInterface) EXPECT() *MockRateInterfaceMockRecorder {
	return m.recorder
}

// GetRate mocks base method.
func (m *MockRateInterface) GetRate() (model.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRate")
	ret0, _ := ret[0].(model.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRate indicates an expected call of GetRate.
func (mr *MockRateInterfaceMockRecorder) GetRate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRate", reflect.TypeOf((*MockRateInterface)(nil).GetRate))
}

// SaveRate mocks base method.
func (m *MockRateInterface) SaveRate(currencyFrom, currencyTo string, exchangeRate float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveRate", currencyFrom, currencyTo, exchangeRate)
}

// SaveRate indicates an expected call of SaveRate.
func (mr *MockRateInterfaceMockRecorder) SaveRate(currencyFrom, currencyTo, exchangeRate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRate", reflect.TypeOf((*MockRateInterface)(nil).SaveRate), currencyFrom, currencyTo, exchangeRate)
}

// MockSubscriberInterface is a mock of SubscriberInterface interface.
type MockSubscriberInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberInterfaceMockRecorder
}

// MockSubscriberInterfaceMockRecorder is the mock recorder for MockSubscriberInterface.
type MockSubscriberInterfaceMockRecorder struct {
	mock *MockSubscriberInterface
}

// NewMockSubscriberInterface creates a new mock instance.
func NewMockSubscriberInterface(ctrl *gomock.Controller) *MockSubscriberInterface {
	mock := &MockSubscriberInterface{ctrl: ctrl}
	mock.recorder = &MockSubscriberInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriberInterface) EXPECT() *MockSubscriberInterfaceMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockSubscriberInterface) Exists(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSubscriberInterfaceMockRecorder) Exists(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSubscriberInterface)(nil).Exists), email)
}

// MockRabbitMQInterface is a mock of RabbitMQInterface interface.
type MockRabbitMQInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitMQInterfaceMockRecorder
}

// MockRabbitMQInterfaceMockRecorder is the mock recorder for MockRabbitMQInterface.
type MockRabbitMQInterfaceMockRecorder struct {
	mock *MockRabbitMQInterface
}

// NewMockRabbitMQInterface creates a new mock instance.
func NewMockRabbitMQInterface(ctrl *gomock.Controller) *MockRabbitMQInterface {
	mock := &MockRabbitMQInterface{ctrl: ctrl}
	mock.recorder = &MockRabbitMQInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitMQInterface) EXPECT() *MockRabbitMQInterfaceMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockRabbitMQInterface) Publish(message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitMQInterfaceMockRecorder) Publish(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitMQInterface)(nil).Publish), message)
}
