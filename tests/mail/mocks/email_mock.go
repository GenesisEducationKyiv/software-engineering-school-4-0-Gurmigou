// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_mails is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMailInterface is a mock of MailInterface interface.
type MockMailInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMailInterfaceMockRecorder
}

// MockMailInterfaceMockRecorder is the mock recorder for MockMailInterface.
type MockMailInterfaceMockRecorder struct {
	mock *MockMailInterface
}

// NewMockMailInterface creates a new mock instance.
func NewMockMailInterface(ctrl *gomock.Controller) *MockMailInterface {
	mock := &MockMailInterface{ctrl: ctrl}
	mock.recorder = &MockMailInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMailInterface) EXPECT() *MockMailInterfaceMockRecorder {
	return m.recorder
}

// SendEmail mocks base method.
func (m *MockMailInterface) SendEmail(subject, templatePath, sendTo string, rate float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmail", subject, templatePath, sendTo, rate)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmail indicates an expected call of SendEmail.
func (mr *MockMailInterfaceMockRecorder) SendEmail(subject, templatePath, sendTo, rate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmail", reflect.TypeOf((*MockMailInterface)(nil).SendEmail), subject, templatePath, sendTo, rate)
}

// SendEmailToAll mocks base method.
func (m *MockMailInterface) SendEmailToAll(subject, templatePath string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendEmailToAll", subject, templatePath)
}

// SendEmailToAll indicates an expected call of SendEmailToAll.
func (mr *MockMailInterfaceMockRecorder) SendEmailToAll(subject, templatePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailToAll", reflect.TypeOf((*MockMailInterface)(nil).SendEmailToAll), subject, templatePath)
}
