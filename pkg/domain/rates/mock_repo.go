// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package mock_rates is a generated GoMock package.
package rates

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRateRepository is a mock of RateRepository interface.
type MockRateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRateRepositoryMockRecorder
}

// MockRateRepositoryMockRecorder is the mock recorder for MockRateRepository.
type MockRateRepositoryMockRecorder struct {
	mock *MockRateRepository
}

// NewMockRateRepository creates a new mock instance.
func NewMockRateRepository(ctrl *gomock.Controller) *MockRateRepository {
	mock := &MockRateRepository{ctrl: ctrl}
	mock.recorder = &MockRateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateRepository) EXPECT() *MockRateRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRateRepository) Create(value interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRateRepositoryMockRecorder) Create(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRateRepository)(nil).Create), value)
}

// Delete mocks base method.
func (m *MockRateRepository) Delete(value interface{}, conds ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{value}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRateRepositoryMockRecorder) Delete(value interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{value}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRateRepository)(nil).Delete), varargs...)
}

// First mocks base method.
func (m *MockRateRepository) First(dest interface{}, conds ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{dest}
	for _, a := range conds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "First", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// First indicates an expected call of First.
func (mr *MockRateRepositoryMockRecorder) First(dest interface{}, conds ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dest}, conds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "First", reflect.TypeOf((*MockRateRepository)(nil).First), varargs...)
}

// Where mocks base method.
func (m *MockRateRepository) Where(query interface{}, args ...interface{}) RateRepository {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Where", varargs...)
	ret0, _ := ret[0].(RateRepository)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockRateRepositoryMockRecorder) Where(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockRateRepository)(nil).Where), varargs...)
}
